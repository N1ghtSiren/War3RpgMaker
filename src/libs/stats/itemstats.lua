---
--- Generated by Luanalysis
--- Created by Siren.
--- DateTime: 18.06.2023 12:42
---


---------------------------------------------------------------------------------------------------

---@param itemid integer|string
---@param damage number
---@param armour number
---@param life number
---@param mana number
---@param life_regen number
---@param mana_regen number
---@param move_speed number
function RegisterItemStats_A(itemid, damage, armour, life, mana, life_regen, mana_regen, move_speed)
  local itemid = fourci(itemid)

  STATS__ITEM_TABLE[itemid] = STATS__ITEM_TABLE[itemid] or NewOrderedTable()

  STATS__ITEM_TABLE[itemid][STAT_KEY_DAMAGE] = damage or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_ARMOUR] = armour or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_LIFE] = life or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_MANA] = mana or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_LIFE_REGEN] = life_regen or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_MANA_REGEN] = mana_regen or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_MOVE_SPEED] = move_speed or 0
end

---@param itemid integer|string
---@param damage_perc number
---@param armour_perc number
---@param life_perc number
---@param mana_perc number
---@param life_regen_perc number
---@param mana_regen_perc number
---@param move_speed_perc number
function RegisterItemStats_AP(itemid, damage_perc, armour_perc, life_perc, mana_perc, life_regen_perc, mana_regen_perc, move_speed_perc)
  local itemid = fourci(itemid)

  STATS__ITEM_TABLE[itemid] = STATS__ITEM_TABLE[itemid] or NewOrderedTable()

  STATS__ITEM_TABLE[itemid][STAT_KEY_DAMAGE_PERCENT] = damage_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_ARMOUR_PERCENT] = armour_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_LIFE_PERCENT] = life_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_MANA_PERCENT] = mana_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_LIFE_REGEN_PERCENT] = life_regen_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_MANA_REGEN_PERCENT] = mana_regen_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_MOVE_SPEED_PERCENT] = move_speed_perc or 0
end


---@param itemid integer|string
---@param str number
---@param agi number
---@param int number
function RegisterItemStats_B(itemid, str, agi, int)
  local itemid = fourci(itemid)

  STATS__ITEM_TABLE[itemid] = STATS__ITEM_TABLE[itemid] or NewOrderedTable()

  STATS__ITEM_TABLE[itemid][STAT_KEY_STR] = str or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_AGI] = agi or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_INT] = int or 0
end

---@param itemid integer|string
---@param str_perc number
---@param agi_perc number
---@param int_perc number
function RegisterItemStats_BP(itemid, str_perc, agi_perc, int_perc)
  local itemid = fourci(itemid)

  STATS__ITEM_TABLE[itemid] = STATS__ITEM_TABLE[itemid] or NewOrderedTable()

  STATS__ITEM_TABLE[itemid][STAT_KEY_STR_PERCENT] = str_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_AGI_PERCENT] = agi_perc or 0
  STATS__ITEM_TABLE[itemid][STAT_KEY_INT_PERCENT] = int_perc or 0
end

---@param itemid integer|string
---@param as_perc number
function RegisterItemStats_C(itemid, as_perc)
  local itemid = fourci(itemid)

  STATS__ITEM_TABLE[itemid] = STATS__ITEM_TABLE[itemid] or NewOrderedTable()

  STATS__ITEM_TABLE[itemid][STAT_KEY_ATTACKSPEED_PERCENT] = as_perc or 0
end

---------------------------------------------------------------------------------------------------

---@type table<string, table<string, string>>
local item_attachments = {}

---@param itemid string
---@param model string
---@param attach_point string
function RegisterItemAttach(itemid, model, attach_point)
  local itemid = fourci(itemid)

  item_attachments[itemid] = item_attachments[itemid] or {}
  item_attachments[itemid][attach_point] = model
  
end

---@param unit unit 
---@param item item
local function UnitAddItemAttachments(unit, item)
  local itemid = fourci(GetItemTypeId(item))
  local effs = item_attachments[itemid]
  if(effs == nil)then return end

  local added_effects = {}

  for attach_point, model in pairs(effs) do
    local eff = AddSpecialEffectTarget(model, unit, attach_point)
    table.insert(added_effects, eff)
  end

  SetObjectData(item, 0, added_effects)
end

---@param _ unit
---@param item item
local function UnitRemoveItemAttachments(_, item)
  local itemid = fourci(GetItemTypeId(item))
  local effs = item_attachments[itemid]
  if(effs == nil)then return end

  ---@type effect[]
  local added_effects = GetObjectData(item, 0)

  for _, eff in pairs(added_effects) do
    DestroyEffect(eff)
  end

  SetObjectData(item, 0, nil)
end

---------------------------------------------------------------------------------------------------

---@param u unit
---@param i item
local function UnitEquipItem(u, i)
  local itemstats = STATS__ITEM_TABLE[fourci(GetItemTypeId(i))]
  if(itemstats == nil) then return end
  if(IsUnitType(u, UNIT_TYPE_HERO) == false)then return end

  STATS__UNIT_TABLE[u] = STATS__UNIT_TABLE[u] or NewOrderedTable()
  local unit_stats = STATS__UNIT_TABLE[u]

  local changed_keys_list = NewOrderedTable()

  for stat_key, v in pairs(itemstats)do
    if(v == nil or v == 0)then goto next end

    unit_stats[stat_key] = unit_stats[stat_key] + v
    table.insert(changed_keys_list, stat_key)

    ::next::
  end

  if(#changed_keys_list > 0)then
    UpdateUnitStats(u, changed_keys_list)
  end
end

---@param u unit
---@param i item
local function UnitDropItem(u, i)
  local item_stats = STATS__ITEM_TABLE[fourci(GetItemTypeId(i))]
  if(item_stats == nil) then return end
  if(IsUnitType(u, UNIT_TYPE_HERO) == false)then return end

  STATS__UNIT_TABLE[u] = STATS__UNIT_TABLE[u] or NewOrderedTable()
  local unit_stats = STATS__UNIT_TABLE[u]
  local changed_keys_list = NewOrderedTable()

  for statkey, v in pairs(item_stats)do
    if(v == nil or v == 0)then goto next end

    unit_stats[statkey] = unit_stats[statkey] - v
    table.insert(changed_keys_list, statkey)

    ::next::
  end

  if(#changed_keys_list > 0)then
    UpdateUnitStats(u, changed_keys_list)
  end

end


local is_inited = false

function Init_ItemStatUpdater()
  if(is_inited)then return end

  local function OnPickup()
    --printd("itemstats: OnPickup")
    UnitEquipItem(GetManipulatingUnit(), GetManipulatedItem())
    UnitAddItemAttachments(GetManipulatingUnit(), GetManipulatedItem())
  end
  RegisterEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, OnPickup)


  local function OnDrop()
    --printd("itemstats: OnDrop")
    UnitDropItem(GetManipulatingUnit(), GetManipulatedItem())
    UnitRemoveItemAttachments(GetManipulatingUnit(), GetManipulatedItem())
  end
  RegisterEvent(EVENT_PLAYER_UNIT_DROP_ITEM, OnDrop)

  is_inited = true
end




