---
--- Generated by Luanalysis
--- Created by Siren.
--- DateTime: 18.06.2023 11:31
---

---@alias statKey integer


-- A damage, armour, hp, mana, hp_reg, mp_reg, ms
---@type statKey
STAT_KEY_DAMAGE = malloc()
---@type statKey
STAT_KEY_ARMOUR = malloc()
---@type statKey
STAT_KEY_LIFE = malloc()
---@type statKey
STAT_KEY_MANA = malloc()
---@type statKey
STAT_KEY_LIFE_REGEN = malloc()
---@type statKey
STAT_KEY_MANA_REGEN = malloc()
---@type statKey
STAT_KEY_MOVE_SPEED = malloc()


-- AP attack_perc, armour_perc, hp_perc, mana_perc, hp_reg_from_max, mp_reg_from_max, ms_perc - base is 0
---@type statKey
STAT_KEY_DAMAGE_PERCENT = malloc()
---@type statKey
STAT_KEY_ARMOUR_PERCENT = malloc()
---@type statKey
STAT_KEY_LIFE_PERCENT = malloc()
---@type statKey
STAT_KEY_MANA_PERCENT = malloc()
---@type statKey
STAT_KEY_LIFE_REGEN_PERCENT = malloc()
---@type statKey
STAT_KEY_MANA_REGEN_PERCENT = malloc()
---@type statKey
STAT_KEY_MOVE_SPEED_PERCENT = malloc()

-- B str, agi, int
---@type statKey
STAT_KEY_STR = malloc()
---@type statKey
STAT_KEY_AGI = malloc()
---@type statKey
STAT_KEY_INT = malloc()

-- BP str_perc, agi_perc, int_perc - base is 100
---@type statKey
STAT_KEY_STR_PERCENT = malloc()
---@type statKey
STAT_KEY_AGI_PERCENT = malloc()
---@type statKey
STAT_KEY_INT_PERCENT = malloc()

-- C base_attackspeed -- необязательные
---@type statKey
STAT_KEY_BASE_ATTACKSPEED = malloc()            -- база обязятельная, иначе оверрайд

-- CD as_percent
---@type statKey
STAT_KEY_ATTACKSPEED_PERCENT = malloc()         -- база 100


---@type statKey
STAT_KEY_DPS = malloc()                         -- базы нет
---@type statKey
STAT_KEY_DPS_PERCENT = malloc()                 -- база 100

---------------------------------------------------------------------------------------------------

---@type table<string, orderedTable<statKey, number>>
STATS__ITEM_TABLE = {}
---@type table<unit, orderedTable<statKey, number>>
STATS__UNIT_TABLE = {}
---@type orderedTable<statKey, fun(u:unit, value:number)>
STATS__FUNC_TABLE = NewOrderedTable()

---@param u unit
---@param stat_key statKey
---@return number
function GetUnitStat(u, stat_key)

  if(STATS__UNIT_TABLE[u] == nil)then
    printdf("Unit has no registered stats: %s", GetUnitName(u))
    return 0
  end

  local v = STATS__UNIT_TABLE[u][stat_key]
  -- yes linter i accept this error
  return v
end


---@param u unit
---@param stat_key statKey
function ModifyUnitStat(u, stat_key, value)
  if(STATS__UNIT_TABLE[u] == nil)then
    --printdf("Unit has no registered stats: %s", GetUnitName(u))
    return
  end

  STATS__UNIT_TABLE[u][stat_key] = STATS__UNIT_TABLE[u][stat_key] + value
  local func = STATS__FUNC_TABLE[stat_key]

  --printdf("unit stat modifier: %s - %s", GetStatName(stat_key), func)

  if(func ~= nil)then
    func(u, STATS__UNIT_TABLE[u][stat_key])
  end
end

---@param statkey statKey
---@param func fun(u:unit, value:number)
function RegisterStatUpdater(statkey, func)
  STATS__FUNC_TABLE[statkey] = func
end

---------------------------------------------------------------------------------------------------

local function InitStatUpdaters()

  ---@param u unit
  local function OnDamageUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_DAMAGE)
    local perc = GetUnitStat(u, STAT_KEY_DAMAGE_PERCENT)
    local value = stat * (perc * 0.01)
    SetUnitBaseDamageByIndex(u, 0, R2I(value))
  end

  RegisterStatUpdater(STAT_KEY_DAMAGE, OnDamageUpdate)
  RegisterStatUpdater(STAT_KEY_DAMAGE_PERCENT, OnDamageUpdate)


  ---@param u unit
  local function OnArmourUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_ARMOUR)
    local perc = GetUnitStat(u, STAT_KEY_ARMOUR_PERCENT)
    local value = stat * (perc * 0.01)
    SetUnitArmour(u, R2I(value))
  end

  RegisterStatUpdater(STAT_KEY_ARMOUR, OnArmourUpdate)
  RegisterStatUpdater(STAT_KEY_ARMOUR_PERCENT, OnArmourUpdate)


  ---@param u unit
  local function OnLifeUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_LIFE)
    local perc = GetUnitStat(u, STAT_KEY_LIFE_PERCENT)
    local value = stat * (perc * 0.01)
    value = math.max(value, 1)

    SetUnitMaxLife(u, value)
  end

  RegisterStatUpdater(STAT_KEY_LIFE, OnLifeUpdate)
  RegisterStatUpdater(STAT_KEY_LIFE_PERCENT, OnLifeUpdate)


  ---@param u unit
  local function OnManaUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_MANA)
    local perc = GetUnitStat(u, STAT_KEY_MANA_PERCENT)
    local value = stat * (perc * 0.01)
    value = math.max(value, 1)

    SetUnitMaxMana(u, value)
  end

  RegisterStatUpdater(STAT_KEY_MANA, OnManaUpdate)
  RegisterStatUpdater(STAT_KEY_MANA_PERCENT, OnManaUpdate)


  ---@param u unit
  local function OnLifeRegenUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_LIFE_REGEN)
    local perc = GetUnitStat(u, STAT_KEY_LIFE_REGEN_PERCENT)
    local value = stat * (perc * 0.01)

    SetUnitLifeRegen(u, value)
  end

  RegisterStatUpdater(STAT_KEY_LIFE_REGEN, OnLifeRegenUpdate)
  RegisterStatUpdater(STAT_KEY_LIFE_REGEN_PERCENT, OnLifeRegenUpdate)


  ---@param u unit
  local function OnManaRegenUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_MANA_REGEN)
    local perc = GetUnitStat(u, STAT_KEY_MANA_REGEN_PERCENT)
    local value = stat * (perc * 0.01)

    SetUnitManaRegen(u, value)
  end

  RegisterStatUpdater(STAT_KEY_MANA_REGEN, OnManaRegenUpdate)
  RegisterStatUpdater(STAT_KEY_MANA_REGEN_PERCENT, OnManaRegenUpdate)


  ---@param u unit
  local function OnMoveSpeedUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_MOVE_SPEED)
    local perc = GetUnitStat(u, STAT_KEY_MOVE_SPEED_PERCENT)
    local value = stat * (perc * 0.01)

    SetUnitMoveSpeed(u, value)
  end

  RegisterStatUpdater(STAT_KEY_MOVE_SPEED, OnMoveSpeedUpdate)
  RegisterStatUpdater(STAT_KEY_MOVE_SPEED_PERCENT, OnMoveSpeedUpdate)

  ----

  ---@param u unit
  local function OnStrUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_STR)
    local perc = GetUnitStat(u, STAT_KEY_STR_PERCENT)
    local value = stat * (perc * 0.01)
    SetHeroStr(u, R2I(value), true)
  end

  RegisterStatUpdater(STAT_KEY_STR, OnStrUpdate)
  RegisterStatUpdater(STAT_KEY_STR_PERCENT, OnStrUpdate)


  ---@param u unit
  local function OnAgiUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_AGI)
    local perc = GetUnitStat(u, STAT_KEY_AGI_PERCENT)
    local value = stat * (perc * 0.01)
    SetHeroAgi(u, R2I(value), true)
  end

  RegisterStatUpdater(STAT_KEY_AGI, OnAgiUpdate)
  RegisterStatUpdater(STAT_KEY_AGI_PERCENT, OnAgiUpdate)


  ---@param u unit
  local function OnIntUpdate(u)
    local stat = GetUnitStat(u, STAT_KEY_INT)
    local perc = GetUnitStat(u, STAT_KEY_INT_PERCENT)
    local value = stat * (perc * 0.01)
    SetHeroInt(u, R2I(value), true)
  end

  RegisterStatUpdater(STAT_KEY_INT, OnIntUpdate)
  RegisterStatUpdater(STAT_KEY_INT_PERCENT, OnIntUpdate)


  ---@param u unit
  local function OnBaseAsUpdate(u)
    local as_cd = GetUnitStat(u, STAT_KEY_BASE_ATTACKSPEED)
    local as_perc = GetUnitStat(u, STAT_KEY_ATTACKSPEED_PERCENT)

    local cd = as_cd / (as_perc * 0.01)
    SetUnitAttackCooldownByIndex(u, 0, cd)
  end

  RegisterStatUpdater(STAT_KEY_BASE_ATTACKSPEED, OnBaseAsUpdate)
  RegisterStatUpdater(STAT_KEY_ATTACKSPEED_PERCENT, OnBaseAsUpdate)

end
InitStatUpdaters()


---------------------------------------------------------------------------------------------------
---@param u unit
---@param key_list orderedTable<number, statKey>
function UpdateUnitStats(u, key_list)

  for _, stat_key in pairs(key_list) do
    local func = STATS__FUNC_TABLE[stat_key]
    if(func ~= nil)then
      func(u, STATS__UNIT_TABLE[u][stat_key])
    end
  end
end

---@param u unit
function UpdateUnitStatsForced(u)

  for stat_key, func in pairs(STATS__FUNC_TABLE) do
    func(u, STATS__UNIT_TABLE[u][stat_key])
  end
end

---------------------------------------------------------------------------------------------------

---@param u unit
---@return orderedTable<statKey, number>
function GetUnitStatCopy(u)
  return STATS__UNIT_TABLE[u] and tableShadowCopy(STATS__UNIT_TABLE[u], NewOrderedTable()) or nil
end