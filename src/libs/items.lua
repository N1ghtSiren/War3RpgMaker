---
--- Generated by Luanalysis
--- Created by Siren.
--- DateTime: 16.06.2023 13:45
---

--ctrl+f "ItemTypeIdandGold_Init"

---@alias ex_item_event integer

---@type ex_item_event
EX_EVENT_ITEM_PICKUP = malloc()   -- EVENT_PLAYER_UNIT_PICKUP_ITEM
---@type ex_item_event
EX_EVENT_ITEM_DROP = malloc()     -- EVENT_PLAYER_UNIT_DROP_ITEM
---@type ex_item_event
EX_EVENT_ITEM_USE = malloc()      -- EVENT_PLAYER_UNIT_USE_ITEM
---@type ex_item_event
EX_EVENT_ITEM_SELL = malloc()     -- EVENT_PLAYER_UNIT_SELL_ITEM  (market -> unit)
---@type ex_item_event
EX_EVENT_ITEM_PAWN = malloc()     -- EVENT_PLAYER_UNIT_PAWN_ITEM  (unit -> market)


local item_list = {}

---@param itemid integer | string
---@param event_type ex_item_event
---@param callback fun():void
function RegisterItemExEvent(itemid, event_type, callback)
  -- original = pure war3 = hashtable[trig][abilityid]
  -- my = pure lua = table[event_type][abilityid] = callback
  itemid = fourcc(itemid) --we save it as string

  item_list[event_type] = item_list[event_type] or {}
  item_list[event_type][itemid] = callback
end

---@param aid integer | string
---@param event_type ex_item_event
local function ExecuteItemExEvent(aid, event_type)
  if(item_list[event_type] == nil)then return end

  local callback = item_list[event_type][fourcc(aid)]
  if(callback == nil) then return end

  callback()
end


function Init_ItemTrigs()
  local function OnPickup()
    --printdf("OnPickup: %s", fourci(GetItemTypeId(GetManipulatedItem())))
    ExecuteItemExEvent(GetItemTypeId(GetManipulatedItem()) , EX_EVENT_ITEM_PICKUP)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, OnPickup)


  local function OnDrop()
    --printdf("OnDrop: %s", fourci(GetItemTypeId(GetManipulatedItem())))
    ExecuteItemExEvent(GetItemTypeId(GetManipulatedItem()) , EX_EVENT_ITEM_DROP)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_DROP_ITEM, OnDrop)


  local function OnUse()
    --printdf("OnUse: %s", fourci(GetItemTypeId(GetManipulatedItem())))
    ExecuteItemExEvent(GetItemTypeId(GetManipulatedItem()) , EX_EVENT_ITEM_USE)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_USE_ITEM, OnUse)


  local function OnSell()
    --printdf("OnSell: %s", fourci(GetItemTypeId(GetSoldItem())))
    ExecuteItemExEvent(GetItemTypeId(GetSoldItem()) , EX_EVENT_ITEM_SELL)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_SELL_ITEM, OnSell)


  local function OnPawn()
    --printdf("OnPawn: %s", fourci(GetItemTypeId(GetSoldItem())))
    ExecuteItemExEvent(GetItemTypeId(GetSoldItem()) , EX_EVENT_ITEM_PAWN)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_PAWN_ITEM, OnPawn)
end

---------------------------------------------------------------------------------------------------
---@alias ex_item_c_event integer

---@type ex_item_c_event
EX_EVENT_ITEM_C_CREATED = malloc()            -- hook, CreateItem
---@type ex_item_c_event
EX_EVENT_ITEM_C_REMOVED = malloc()            -- hook, RemoveItem

---@type table<string, table<ex_item_c_event, FuncList>>
local custom_event_list = {}


---@param itemid string|integer
---@param event_type ex_item_c_event
---@param callback fun(item:item)
function RegisterItemExEvent2(itemid, event_type, callback)
  local itemid = fourci(itemid)

  custom_event_list[itemid] = custom_event_list[itemid] or {}
  custom_event_list[itemid][event_type] = custom_event_list[itemid][event_type] or {}
  FuncListAdd(custom_event_list[itemid][event_type], callback)
end


---@param itemid integer|string
---@param item item
---@param event_type ex_item_c_event
local function ExecuteItemExEvent2(itemid, event_type, item)
  local itemid = fourci(itemid)
  if(custom_event_list[itemid] == nil)then return end

  local func_list = custom_event_list[itemid][event_type]
  if(func_list == nil) then return end

  FuncListExecute(func_list, item)
end



local CreateItemOrigin = CreateItem

---@param itemid string|integer
---@param x number
---@param y number
---@return item
function CreateItem( itemid, x, y)
  local item = CreateItemOrigin(fourcc(itemid), x, y)
  ExecuteItemExEvent2(itemid, EX_EVENT_ITEM_C_CREATED, item)
  return item
end


local RemoveItemOrigin = RemoveItem

---@param item item
function RemoveItem(item)
  ExecuteItemExEvent2(GetItemTypeId(item), EX_EVENT_ITEM_C_REMOVED, item)
  RemoveItemOrigin(item)
end

---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
---@type table<number, fun():void>
local init_list = {}

--- registers callback on big ability init list
--- used when you need to change base item data
--- when ExecuteItemInitList is called, all list will be called at once
---@param itemid integer|string
---@param callback fun():void
function RegisterItemInitCallback(itemid, callback)
  init_list[fourcc(itemid)] = callback
end


local is_inited = false

--- executes all registered init events at once
function Execute_ItemInitList()
  if(is_inited)then return end

  for _, func in pairs(init_list)do
    func()
  end

  is_inited = true
end