---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 30.05.2023 17:32
---

---@param msg any
function printd(msg)
  print(msg)
  printc(msg)
end

---@param format string
---@vararg any
function printdf(format, ...)
  printd(string.format(format, ...))
end


---@param t table
---@return void
---@overload fun(t)
function printTable(t, text)
  if(t == nil)then printd("de fuck, table is nil") return end
  text = text or ""
  local type_table = "table"
  local format = "%stable[%s] = %s"
  for k, v in pairs(t) do
    if(type(v) == type_table)then
      printd(string.format(format, text, k, v))
      printTable(v, text.."  ") --tabs not working properly in game
    else
      printd(string.format(format, text, k, v))
    end
  end
end

---@generic T, K
---@param orig table<T, K>
---@return table<T, K>
function tableShadowCopy(orig, target)
  target = target or {}

  for k, v in pairs(orig) do
    target[k] = v
  end

  return target
end

---@param t table
---@param value any
---@return boolean
function tableContains(t, value)
  if(t == nil)then return false end

  for _, v in pairs(t) do
    if(v == value)then
      return true
    end
  end
  return false
end


---@param t [K, V]
---@param value any
function tableRemoveValue(t, value)
  for k, v in ipairs(t) do
    if(v == value)then
      table.remove(t, k)
      return
    end
  end
end


---@generic V
---@param t V[]
---@param value V
---@param exclude_key_list V[] | nil
function tableFindKeyByValue(t, value, exclude_key_list)

  for k, v in ipairs(t)do
    if((value == v) and (exclude_key_list and tableContains(exclude_key_list, k) == false))then
      return k
    end
  end

  return nil
end


---@generic V, K
---@param t table<K, V>
---@return V[]
function tableValuesToSortedTable(t)
  local values = {}
  for _, v in pairs(t) do
    table.insert(values, v)
  end
  table.sort(values)
  return values
end


---@generic V, K
---@param t table<K, V>
---@return K[]
function tableKeysToSortedTable(t)
  local keys = {}
  for k, _ in pairs(t) do
    table.insert(keys, k)
  end
  table.sort(keys)
  return keys
end


local TYPE_STRING = type("string")
local TYPE_NUMBER = type(1)

---ensures that return will be number
---@param value string | number
---@return number
function fourcc(value)
  return type(value) == TYPE_STRING and ('>I4'):unpack(value) or value
end

---ensures that result will be string
---@param value string | number
---@return string
function fourci(value)
  return type(value) == TYPE_NUMBER and ('>I4'):pack(value) or value
end

---@param number number
---@param min number
---@param max number
---@return number
function math.clamp(number, min, max)
  return math.min(math.max(number, min), max)
end

local malloc_n = 0
---@return number
function malloc()
  malloc_n = malloc_n + 1
  return malloc_n
end
-- test area

---@return unit
function CreateUnitPal()
  return CreateUnit(Player(0), FourCC("Hpal"), 0, 0, 0)
end

---@return item
function CreateItemClaws()
  return CreateItem(FourCC("rat6"), 0, 0)
end

