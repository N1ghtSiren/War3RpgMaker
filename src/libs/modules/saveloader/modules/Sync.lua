---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 27.11.2022 11:24
---

---@shape syncInstance
---@field data string
---@field key integer
---@field sender player  -- pid of syncing player
---@field action fun(sender: player, sync_str:string): void
---@field timer timer

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------

---@type table<integer, syncInstance>
local branch = --[[---@type table<integer, syncInstance> ]]{}

---@type hashtable
local hashtable = nil
local PARENT_KEY = 42
local key_counter = 1


---@param syncInstance syncInstance
local function Delete(syncInstance)
  branch[syncInstance.key] = nil
end


---@param player player
---@return syncInstance
local function Alloc(player)

  ---@type syncInstance
  local instance = {
    data = "",
    key = key_counter,
    sender = player,
    action = nil,
    timer = nil,
  }

  key_counter = key_counter + 1

  branch[instance.key] = instance

  return instance
end


---@overload fun(sender: player)
---@param sender player
---@param aliveTimeSec integer
---@return syncInstance
local function PrepareInstance(sender, aliveTimeSec)
  aliveTimeSec = aliveTimeSec or 60
  local instance = Alloc(sender)
  instance.timer = CreateTimer()

  TimerStart(instance.timer, aliveTimeSec, false, function()
    Delete(instance)
    DestroyTimer(GetExpiredTimer())
  end)

  return instance
end

-- todo: max string size for sync is 1024 because of packet limit (c) Unryze
---@param syncInstance syncInstance
---@param str string
---@param onSyncAction fun(sender: player, sync_str:string ): void
local function SyncString(syncInstance, str, onSyncAction)
  syncInstance.action = onSyncAction

  --printdf("sync: sync attempt from %s", GetPlayerName(syncInstance.sender))

  if(GetLocalPlayer() == syncInstance.sender)then
    if(str == nil) then return end

    SaveStr(hashtable, PARENT_KEY, syncInstance.key, str)
    SyncSavedString(hashtable, PARENT_KEY, syncInstance.key)
  end
end

local function InitSync()
  hashtable = InitHashtable()
  local trig = CreateTrigger()

  for i = 0, 15 do
    TriggerRegisterPlayerHashtableDataSyncEvent(trig, Player(i), hashtable)
  end

  local function On_Sync()

    --[[
    printd("sync: sync trig activated")
    local key = GetSyncSavedChildKey()
    local data = LoadStr(hashtable, PARENT_KEY, key)
    local stamp = GetTimeStamp(true, 1)
    Logger.SendDebug("[%s] sync data arrived: [%s] = %s", stamp, key, data)
    ]]

    local key = GetSyncSavedChildKey()
    ---@type syncInstance
    local syncInstance = branch[key]
    if(syncInstance == nil) then return end
    syncInstance.action(syncInstance.sender, LoadStr(hashtable, PARENT_KEY, key))

    RemoveSavedString(hashtable, PARENT_KEY, key)
  end

  TriggerAddAction(trig, On_Sync)
end
InitSync()

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

Sync = {
  PrepareInstance = PrepareInstance,
  SyncString = SyncString,
}