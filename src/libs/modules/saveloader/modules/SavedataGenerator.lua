---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 26.11.2022 8:10
---

--[[
overall logic:

save:
  gather ingame data
  put it into a table SaveData

  convert saveData to portableSaveData
  units to unitids, items to itemids, gold, stats, etc

  --> encode, write to a disk

load:
  load string, try to decode as portableSaveData

  convert portableSaveData to saveData
  unitids to units, itemids to items, numbers to gold, stats, etc

  --> create all this
]]

local EMPTY_INVENTORY_SLOT = "empty"

---@shape portableSaveData
---@field hero_id string
---@field items string[]              --[[ 1~6 - hero; 7~12 - bag]]
---@field gold integer

---@shape saveData
---@field hero unit
---@field items item[]                --[[ 1~6 - hero; 7~12 - bag]]
---@field gold integer


---@param portable portableSaveData
local function FillWithEmptyItems(portable)
  for i = 1, 12 do
    portable.items[i] = portable.items[i] or EMPTY_INVENTORY_SLOT
  end
end

---@param portable portableSaveData
local function RemoveEmptyItems(portable)
  for i = 1, 12 do
    if(portable.items[i] == EMPTY_INVENTORY_SLOT)then
      portable.items[i] = nil
    end
  end
end

---@param player player
---@return boolean, saveData
local function GatherSaveData(player)

  local hero = GetPlayerHero(player)
  local bag = GetPlayerBag(player)

  if(hero == nil)then
    Logger.SendInfoLocal(player, "error: no hero to save")
  end

  if(bag == nil)then
    Logger.SendInfoLocal(player, "error: no bag to save")
  end

  if(hero == nil or bag == nil)then
    return false, nil
  end

  ---@type saveData
  local save_data = --[[---@type saveData]] {}

  save_data.hero = hero
  save_data.gold = GetPlayerState(player, PLAYER_STATE_RESOURCE_GOLD)
  save_data.items = --[[---@type item[] ]] NewOrderedTable()

  --hero items
  local item_save_slot = 1

  for i = 0, 5 do
    save_data.items[item_save_slot] = UnitItemInSlot(hero, i)
    item_save_slot = item_save_slot + 1
  end

  --bag items
  for i = 0, 5 do
    save_data.items[item_save_slot] = UnitItemInSlot(bag, i)
    item_save_slot = item_save_slot + 1
  end

  return true, save_data
end

---@param save_data saveData
---@return portableSaveData
local function SaveDataToPortableData(save_data)

  ---@type portableSaveData
  local portable = --[[---@type portableSaveData]] {}

  portable.hero_id = fourci(GetUnitTypeId(save_data.hero))
  portable.gold = R2I(save_data.gold)
  portable.items = --[[---@type string[] ]] NewOrderedTable()

  for index, item in pairs(save_data.items)do
    if(item)then
      portable.items[index] = fourci(GetItemTypeId(item))
    end
  end

  FillWithEmptyItems(portable)

  --Logger.SendDebug("portable_data")
  --printTable(portable)

  return portable
end

---@param player
---@return boolean, portableSaveData, saveData
local function GatherPortableData(player)
  local is_valid, save_data = GatherSaveData(player)
  if(is_valid == false)then return false, nil, nil end

  local portable = SaveDataToPortableData(save_data)

  return is_valid, portable, save_data
end


---@param player player
---@param portable portableSaveData
---@return saveData
local function RestorePortableData(player, portable)
  RemoveEmptyItems(portable)

  --Logger.SendDebug("portable_data")
  --printTable(portable)

  ---@type saveData
  local save_data = --[[---@type saveData ]] {}

  save_data.gold = portable.gold

  SetPlayerState(player, PLAYER_STATE_RESOURCE_GOLD, save_data.gold)

  save_data.hero = CreateUnit(player, fourcc(portable.hero_id), 0, 0, 0)
  save_data.items = --[[---@type item[] ]] NewOrderedTable()

  for index = 1, 6 do
    local itemid = portable.items[index]
    if(itemid ~= nil and itemid ~= EMPTY_INVENTORY_SLOT)then
      if(UnitAddItemToSlotById(save_data.hero, fourcc(itemid), index-1))then
        local item = UnitItemInSlot(save_data.hero, fourcc(itemid))
        --printdf("item[%s]: %s", index, itemid)
        save_data.items[index] = item
      end
    end
  end

  local bag = GetPlayerBag(player)

  for index = 7, 12 do
    local itemid = portable.items[index]
    if(itemid ~= nil and itemid ~= "")then
      if(UnitAddItemToSlotById(bag, fourcc(itemid), index-7))then
        local item = UnitItemInSlot(bag, fourcc(itemid))
        --printdf("item[%s]: %s", index, itemid)
        save_data.items[index] = item
      end
    end
  end


  return save_data
end


--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

SavedataGenerator = {
  GatherPortableData = GatherPortableData,
  RestorePortableData = RestorePortableData,
}

return SavedataGenerator