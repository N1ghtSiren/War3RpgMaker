---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 09.11.2022 6:03
---

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------


SAVELOADER_COMMAND_CHAT_START = "-code begin"
SAVELOADER_COMMAND_CHAT_END = "-code end"

local MAP_VERSION = "1.0 alpha"
local SAVE_FOLDER = "SirenRpgMaker"
local SAVE_FILE_TEMPLATE = [[
version: %s
timestamp: %s
code:
%s]]


SDoFile("libs\\modules\\saveloader\\modules\\base64.lua")
SDoFile("libs\\modules\\saveloader\\modules\\json.lua")
SDoFile("libs\\modules\\saveloader\\modules\\Sync.lua")
--SDoFile("libs\\modules\\saveloader\\modules\\DriveAccessor.lua")
SDoFile("libs\\modules\\saveloader\\modules\\DriveAccessorOld.lua")
SDoFile("libs\\modules\\saveloader\\modules\\ChatRecorder.lua")
SDoFile("libs\\modules\\saveloader\\modules\\ContentEncoder.lua")
SDoFile("libs\\modules\\saveloader\\modules\\SavedataGenerator.lua")

---@type fun(player:player, save_data:saveData)
local ON_LOAD_SUCCESS_CALLBACK
---@type fun(player:player, save_data:saveData)
local ON_SAVE_SUCCESS_CALLBACK

---@param savecode string
---@return string
local function CreateFileContent(savecode)
  local timestamp, file_content

  timestamp = tostring(os.date("%H:%M:%S %d %m %Y"))
  file_content = string.format(SAVE_FILE_TEMPLATE, MAP_VERSION, timestamp, savecode)

  return file_content
end


---@param player player
---@param filename string
---@param onSuccess fun(sender:player, save_data:saveData)
local function TrySavePlayer(player, filename, onSuccess)
  local pid = GetPlayerId(player)
  local is_valid, portable, savedata, savecode, file_content

  is_valid, portable, savedata = SavedataGenerator.GatherPortableData(player)
  if(is_valid == false) then
    Logger.SendInfoLocal(Player(pid),  "error while creating savedata")
    return
  end

  savecode = ContentEncoder.Encode(portable)
  file_content = CreateFileContent(savecode)


  if(GetLocalPlayer() == player)then
    is_valid = DriveAccessor.WriteFile(player, SAVE_FOLDER, filename, file_content)
    if(is_valid)then
      Logger.SendInfoLocal(player,  "file saved in folder %s", SAVE_FOLDER)
    else
      Logger.SendInfoLocal(player,  "error while creating file")
    end
  end

  printd("sync attempt")

  syncInstance = Sync.PrepareInstance(player)
  Sync.SyncString(syncInstance, is_valid and "true" or "false", function(sender, sync_data)
    printd("sync passed")

    if(sync_data == "true")then
      if(onSuccess~=nil)then
        onSuccess(sender, savedata)
      end
    end
  end)

  return false
end


---@param player player
---@param file_content string
---@param pattern string
---@return boolean, string
local function ParseFile(player, file_content, pattern)
  local first, last, code

  first, last = string.find(file_content, pattern)
  if(first == nil)then
    Logger.SendInfoLocal(player, "cannot find pattern in file content")
    return false, nil
  end

  code = string.sub(file_content, last+2, string.len(file_content))

  return true, code
end

---@param player player
---@param filename string
---@param onLoadSuccess fun(player: player, save_data: saveData)
local function TryLoadFile(player, filename, onLoadSuccess)
  local is_valid, file_content, savecode, syncInstance

  -- validate
  if(GetLocalPlayer() == player)then
    is_valid, file_content  = DriveAccessor.ReadFile(SAVE_FOLDER, filename)
    if(is_valid == false) then
      Logger.SendInfoLocal(player, "error while reading file")
      goto syncAttempt
    end

    is_valid, savecode = ParseFile(player, file_content, "code:")
    if(is_valid == false) then
      Logger.SendInfoLocal(player, "error while parsing file")
      goto syncAttempt
    end

    if(ContentEncoder.Decode(savecode) == false) then
      Logger.SendInfoLocal(player, "error while decoding save")
      goto syncAttempt
    end
  end

  ::syncAttempt::

  printd("sync attempt")

  syncInstance = Sync.PrepareInstance(player, 60)
  Sync.SyncString(syncInstance, savecode, function(sender, sync_data)
    local _, portable = ContentEncoder.Decode(sync_data)
    printd("sync passed")

    local save_data = SavedataGenerator.RestorePortableData(sender, portable)
    printdf("args: player: %s, sync_data: %s", sender, sync_data)

    printdf("calling onLoadSuccess: %s", onLoadSuccess)
    if(onLoadSuccess~=nil)then
      onLoadSuccess(sender, save_data)

      printdf("onLoadSuccess: done")
    end

    printdf("sync callback done")
  end)
end


---@param player player
---@param code string
local function TryLoadCode(player, code)
  local is_valid, portable= ContentEncoder.Decode(code)
  if(is_valid == false) then
    Logger.SendInfoLocal(player, "error while decoding save")
    return
  end

  local save_data = SavedataGenerator.RestorePortableData(player, portable)
  if(ON_LOAD_SUCCESS_CALLBACK == nil)then
    Logger.SendDebug("Saveloader.RegisterOnLoadSuccessCallback was never called!")
  else
    ON_LOAD_SUCCESS_CALLBACK(player, save_data)
  end
end

---@param callback fun(player:player, save_data:saveData)
local function RegisterOnLoadSuccessCallback(callback)
  ON_LOAD_SUCCESS_CALLBACK = callback
end

---@param callback fun(player:player, save_data:saveData)
local function RegisterOnSaveSuccessCallback(callback)
  ON_SAVE_SUCCESS_CALLBACK = callback
end


local is_inited = false

local function Init()
  if(is_inited)then return end

  ChatCommandList.AddCommand(function(player, args)
    ChatRecorder.StartRecord(player)
  end, "starts to record chat for manual loading", {SAVELOADER_COMMAND_CHAT_START})

  ChatCommandList.AddCommand(function(player, args)
    local is_valid, code = ChatRecorder.EndRecord(player)
    if(is_valid)then
      TryLoadCode(player, code)
    end
  end, "ends recording chat and tried to load what you entered", {SAVELOADER_COMMAND_CHAT_END})

  ChatCommandList.AddCommand(function(player, args)
    Saveloader.TrySavePlayer(player, args, ON_SAVE_SUCCESS_CALLBACK)
  end, "saves data into filename", {"-save"})

  ChatCommandList.AddCommand(function(player, args)
    printdf("trying to load file from player %s", GetPlayerName(player))
    Saveloader.TryLoadFile(player, args, ON_LOAD_SUCCESS_CALLBACK)
    printd("trying to load file finished")
  end, "restores data from filename", {"-load"})

  is_inited = true
end

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

Saveloader = {
  Init = Init,
  TryLoadFile = TryLoadFile,
  TryLoadCode = TryLoadCode,
  TrySavePlayer = TrySavePlayer,
  RegisterOnLoadSuccessCallback = RegisterOnLoadSuccessCallback,
  RegisterOnSaveSuccessCallback = RegisterOnSaveSuccessCallback,
}