---
--- Generated by Luanalysis
--- Created by Siren.
--- DateTime: 17.06.2023 15:15
---

---@alias FuncList fun[]


---@type FuncList
local cur_executing
---@type FuncList
local temp_add
---@type FuncList
local temp_remove

---@param list FuncList
local function FuncListApplyChanges(list)
  if(cur_executing ~= list)then return end

  if(temp_remove ~= nil)then
    for _, v in ipairs(temp_remove)do
      tableRemoveValue(list, v)
    end
    temp_remove = nil --yes linter, sure
  end

  if(temp_add ~= nil)then
    for _, v in ipairs(temp_add)do
      table.insert(list, v)
    end
    temp_add = nil  --yes linter, sure
  end

end


---@overload fun(list:FuncList) : void
---@param list FuncList
---@vararg any
function FuncListExecute(list, ...)
  cur_executing = list

  for _, func in ipairs(list)do
    func(...)
  end

  FuncListApplyChanges(list)
  cur_executing = nil --yes linter, sure
end


---@param list FuncList
---@param func fun
function FuncListAdd(list, func)
  if(cur_executing ~= list)then
    table.insert(list, func)
  else
    --if we trying to change list which used right now
    temp_add = temp_add or {}
    table.insert(temp_add, func)
  end
end


---@param list FuncList
---@param func fun
function FuncListAddIfNotPresent(list, func)
  if(tableContains(list, func) == true)then return end

  if(cur_executing ~= list)then
    table.insert(list, func)
  else
    --if we trying to change list which used right now
    temp_add = temp_add or {}
    table.insert(temp_add, func)
  end
end


---@param list FuncList
---@param func fun
function FuncListRemove(list, func)
  if(cur_executing ~= list)then
    tableRemoveValue(list, func)
  else
    --if we trying to change list which used right now
    temp_remove = temp_remove or {}
    table.insert(temp_remove, func)
  end
end


---@param list FuncList
function FuncListClear(list)
  for _, func in pairs(list) do
    FuncListRemove(list, func)
  end
end


function FuncListTest()
  local list = {}

  local f1, f2, f3

  f3 = function()printd("f3"); FuncListAdd(list, f1) end
  f2 = function()printd("f2"); FuncListAdd(list, f3) end
  f1 = function()printd("f1"); FuncListAdd(list, f2); end

  FuncListAdd(list, f1)

  FuncListExecute(list)     --expected: f1
  printd("")
  FuncListExecute(list)     --expected: f1, f2
  printd("")
  FuncListExecute(list)     --expected: f1, f2, f2, f3
  printd("")
  FuncListExecute(list)     --expected: f1, f2, f2, f3, f2, f3, f3, f1

  --not expected: stack overflow
end


function FuncListTest2()
  local list = {}

  local f1, f2, f3

  f3 = function()printd("f3"); FuncListAddIfNotPresent(list, f1) end
  f2 = function()printd("f2"); FuncListAddIfNotPresent(list, f3) end
  f1 = function()printd("f1"); FuncListAddIfNotPresent(list, f2); end

  FuncListAdd(list, f1)

  FuncListExecute(list)     --expected: f1
  printd("")
  FuncListExecute(list)     --expected: f1, f2
  printd("")
  FuncListExecute(list)     --expected: f1, f2, f3
  printd("")
  FuncListExecute(list)     --expected: f1, f2, f3

  --not expected: stack overflow
end