---
--- Generated by Luanalysis
--- Created by Siren.
--- DateTime: 16.06.2023 10:16
---

---@alias ex_unit_event integer

---@type ex_unit_event
EX_EVENT_UNIT_ATTACKING = malloc()          -- EVENT_PLAYER_UNIT_DAMAGING + GetEventIsAttack()
---@type ex_unit_event
EX_EVENT_UNIT_DAMAGED = malloc()            -- EVENT_PLAYER_UNIT_DAMAGED
---@type ex_unit_event
EX_EVENT_UNIT_DAMAGING = malloc()           -- EVENT_PLAYER_UNIT_DAMAGING
---@type ex_unit_event
EX_EVENT_UNIT_SPELL_EFFECT = malloc()       -- EVENT_PLAYER_UNIT_SPELL_EFFECT
---@type ex_unit_event
EX_EVENT_UNIT_DEATH = malloc()              -- EVENT_PLAYER_UNIT_DEATH
---@type ex_unit_event
EX_EVENT_UNIT_KILL = malloc()               -- EVENT_PLAYER_UNIT_KILL
---@type ex_unit_event
EX_EVENT_HERO_LEVEL = malloc()              -- EVENT_PLAYER_UNIT_KILL


---@type table<unit, table<ex_unit_event, FuncList>>
local event_list = {}

---@param unit unit
---@param event_type ex_unit_event
---@param callback fun():void
function RegisterUnitExEvent(unit, event_type, callback)
  event_list[unit] = event_list[unit] or {}
  event_list[unit][event_type] = event_list[unit][event_type] or {}
  FuncListAdd(event_list[unit][event_type], callback)
end

---@param unit unit
---@param event_type ex_unit_event
---@param callback fun():void
function RemoveUnitExEvent(unit, event_type, callback)
  if(event_list[unit] == nil)then return end
  if(event_list[unit][event_type] == nil)then return end

  FuncListRemove(event_list[unit][event_type], callback)
end

---@param unit unit
---@param event_type ex_unit_event
local function ExecuteUnitExEvent(unit, event_type)
  if(event_list[unit] == nil)then return end
  if(event_list[unit][event_type] == nil)then return end

  local func_list = event_list[unit][event_type]
  if(func_list == nil) then return end

  FuncListExecute(func_list)
end


local init_done = false

function Init_UnitTrigs()
  if(init_done)then return end

  local function OnDamaged()
    --printdf("units:OnDamaged: %s", GetEventDamageTarget())

    ExecuteUnitExEvent(GetEventDamageTarget(), EX_EVENT_UNIT_DAMAGED)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_DAMAGED, OnDamaged)


  local function OnDamaging()
    --printdf("OnDamaging: %s", GetEventDamageSource())

    local source = GetEventDamageSource()
    if(GetEventIsAttack())then
      ExecuteUnitExEvent(source, EX_EVENT_UNIT_ATTACKING)
    end
    ExecuteUnitExEvent(source, EX_EVENT_UNIT_DAMAGING)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_DAMAGING, OnDamaging)


  local function OnSpellEffect()
    --printdf("OnSpellEffect: %s", GetTriggerUnit())

    local caster = GetTriggerUnit()
    local target = GetSpellTargetUnit()

    ExecuteUnitExEvent(caster, EX_EVENT_UNIT_SPELL_EFFECT)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, OnSpellEffect)


  local function OnDeath()
    --printdf("OnDeath: %s", GetTriggerUnit())
    local killer = GetKillingUnit()
    local target = GetTriggerUnit()

    ExecuteUnitExEvent(target, EX_EVENT_UNIT_DEATH)
    ExecuteUnitExEvent(killer, EX_EVENT_UNIT_KILL)
  end
  RegisterEvent(EVENT_PLAYER_UNIT_DEATH, OnDeath)


  local function OnLevelUp()
    --printdf("OnLevelUp: %s", GetLevelingUnit())
    local u = GetLevelingUnit()
    ExecuteUnitExEvent(u, EX_EVENT_UNIT_KILL)
  end
  RegisterEvent(EVENT_PLAYER_HERO_LEVEL, OnLevelUp)

  init_done = true
end


---------------------------------------------------------------------------------------------------
---@alias ex_unit_c_event integer

---@type ex_unit_c_event
EX_EVENT_UNIT_C_CREATED = malloc()            -- hook, CreateUnitC
---@type ex_unit_c_event
EX_EVENT_UNIT_C_REMOVED = malloc()            -- hook, RemoveUnitC

---@type table<string, table<ex_unit_c_event, FuncList>>
local custom_event_list = {}


---@param unitid string|integer
---@param event_type ex_unit_c_event
---@param callback fun(unit:unit)
function RegisterUnitExEvent2(unitid, event_type, callback)
  local unitid = fourci(unitid)

  custom_event_list[unitid] = custom_event_list[unitid] or {}
  custom_event_list[unitid][event_type] = custom_event_list[unitid][event_type] or {}
  FuncListAdd(custom_event_list[unitid][event_type], callback)
end


---@param unitid string|integer
---@param event_type ex_unit_c_event
---@param callback fun(unit:unit)
function RegisterUnitExEvent2_IgnoreDuplicates(unitid, event_type, callback)
  local unitid = fourci(unitid)

  custom_event_list[unitid] = custom_event_list[unitid] or {}
  custom_event_list[unitid][event_type] = custom_event_list[unitid][event_type] or {}
  FuncListAddIfNotPresent(custom_event_list[unitid][event_type], callback)
end

---@param unitid integer|string
---@param unit unit
---@param event_type ex_unit_c_event
local function ExecuteUnitExEvent2(unitid, event_type, unit)
  local unitid = fourci(unitid)
  if(custom_event_list[unitid] == nil)then return end

  local func_list = custom_event_list[unitid][event_type]
  if(func_list == nil) then return end

  FuncListExecute(func_list, unit)
end



local CreateUnitOrigin = CreateUnit

---@param id player
---@param unitid integer|string
---@param x real
---@param y real
---@param face real
---@return unit
function CreateUnit(id, unitid, x, y, face)
  local u = CreateUnitOrigin(id, fourcc(unitid), x, y, face)
  ApplyDefaultUnitStats(u)
  ExecuteUnitExEvent2(unitid, EX_EVENT_UNIT_C_CREATED, u)
  return u
end


local RemoveUnitOrigin = RemoveUnit

---@param u unit
function RemoveUnit(u)
  ExecuteUnitExEvent2(GetUnitTypeId(u), EX_EVENT_UNIT_C_REMOVED, u)
  RemoveUnitOrigin(u)
end

---------------------------------------------------------------------------------------------------
---@type table<number, fun():void>
local init_list = {}

--- registers callback on big ability init list
--- used when you need to change base unit data
--- when ExecuteUnitInitList is called, all list will be called at once
---@param aid integer|string
---@param callback fun():void
function RegisterUnitInitCallback(aid, callback)
  init_list[fourcc(aid)] = callback
end


local is_inited = false

--- executes all registered init events at once
function Execute_UnitInitList()
  if(is_inited)then return end

  for _, func in pairs(init_list)do
    func()
  end

  is_inited = true
end