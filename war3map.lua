---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 21.07.2022 13:39
---

---@field string
EXTERNAL_PATH = "src\\"

function SDoFile(path)
    dofile(EXTERNAL_PATH .. path)
end

function SLoadFile(path)
    return loadfile(EXTERNAL_PATH .. path)
end


---@alias mapBuildMode "build"|"dev"

---@param mode mapBuildMode
function SetMapBuildMode(mode)
	if(mode == "build")then
		EXTERNAL_PATH = "src\\"
	elseif(mode == "dev")then
		EXTERNAL_PATH = "Maps\\SirenRpgMaker\\src\\"
	end
end

SetMapBuildMode("dev")

print(EXTERNAL_PATH .. "\n")
printc(EXTERNAL_PATH .. "\n")

--------------------------------------------------------------------
-- 256head debugging
--------------------------------------------------------------------
--- https://wiki.facepunch.com/gmod/Structures/DebugInfo
local isDebug = false
local init_hooks_done = false

---@return boolean
function IsDebugHooksEnabled()
    return init_hooks_done
end

function InitDebugHooks()
    if(init_hooks_done)then return end

    local TriggerAddAction_hook, TimerStart_hook

    function OnNewFunctionCall()
        local stackDepth, debugInfo, funcInfo, paraminfo, localargs, arg_n
        local string_format = string.format

        --for stackDepth = 2, 20 do
        stackDepth = 2
        debugInfo = debug.getinfo(stackDepth)

        if debugInfo == nil then return end

        funcInfo = debug.getinfo(debugInfo.func)

        if(funcInfo.what == "C")then        --func from C - lua cant access that
            paraminfo = "C func, ?"
        else
            paraminfo = funcInfo.nparams
        end

        printc(string_format("[%s] call: %s [%s args] | src: %s:%s ", stackDepth, debugInfo.name, paraminfo, debugInfo.source, debugInfo.linedefined))

        localargs = ""
        arg_n = 0

        --if we know that its not C - amount of params is greater than 0
        if(funcInfo.nparams ~= 0)then
            for i = 1, funcInfo.nparams do
                local name, value = debug.getlocal(stackDepth, i)
                localargs = localargs .. string_format("\n %s: [%s] = %s", i, name, value)
            end
            arg_n = funcInfo.nparams
            printc(string_format("%s args: %s", arg_n, localargs))
        else
            -- if we dosent know amount of args, we print first N (10 is enough)
            -- first N is args of function, rest are up-values
            for i = 1, 10 do
                local name, value = debug.getlocal(stackDepth, i)
                if not name then break end
                arg_n = i
                localargs = localargs .. string_format("\n %s: [%s] = %s", i, name, value)
            end
            printc(string_format("first %s local variables: %s", arg_n, localargs))
        end

        printc("")
    end

    TriggerAddAction_hook, TimerStart_hook = TriggerAddAction, TimerStart

    function TriggerAddAction(trigger, action)

        local function executionHook()
            debug.sethook(OnNewFunctionCall, "c", 0)
            action()
        end

        TriggerAddAction_hook(trigger, executionHook)
    end

    function TimerStart(whichTimer, timeout, periodic, handlerFunc)

        local function executionHook()
            debug.sethook(OnNewFunctionCall, "c", 0)
            handlerFunc()
        end

        TimerStart_hook(whichTimer, timeout, periodic, executionHook)
    end

    -- hook on new function call
    debug.sethook(OnNewFunctionCall, "c", 0)

    init_hooks_done = true
end

if(isDebug)then InitDebugHooks() end

--------------------------------------------------------------------

SDoFile("main.lua")